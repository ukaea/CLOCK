##############################################################################
#
#   Gnuplot script to generate a histogram from count files generated by Clock v.4.1.x 
#
#   Daniel Mason , July 2023
#   (c) UKAEA
#
##############################################################################


# eg run with: gnuplot -e "filename='data/img9.flat.count'" -e "z='100'" -e "s='1'" -e "f='1'" scripts/plot_count_histogram.plt









##############################################################################
#
#   File handling
#   
##############################################################################

#   read in input filename

if (exists("filename")) {
    print "reading from filename: ".filename 
        
} else {
    print "Filename not set. Call with"
    print "  gnuplot -e \"filename='foo.count'\" plot_count_histogram.plt"
    print "where 'foo.count' is name of count file"
    exit gnuplot
}


#   remove the .count filename extension "foo.count" -> "foo"

findPrefix(n,a)=(_n=n, _a=strlen(a), _f=strstrt(a[_a-_n:_a], "."), _f||(_a==_n)?a[1:_a-_n-1]:findPrefix(_n+1,a))
prefix=findPrefix(0,filename)


#   default output file location "foo.eps"

set terminal postscript enhanced eps colour size 4in,3in font ",14"
outfile = prefix.".eps"
set output outfile







##############################################################################
#
#   Conversion of 2d per pixel data into 3d volume density data
#   
##############################################################################



if (exists("s")) {
    print "scale (nm/px) : ".s         
} else {
    print "Scale not set. Call with"
    print "  gnuplot -e \"filename='foo.count'\" [-e \"s='SSSS'\" ] plot_count_histogram.plt"
    print "where 'SSSS' is horizontal scale in (nm per px)"
    print "Assuming scale 1 nm per px"
    s=1 
}



if (exists("f")) {
    print "visible fraction : ".f         
} else {
    print "Visible fraction not set. Call with"
    print "  gnuplot -e \"filename='foo.count'\" [-e \"f='FFFF'\" ] plot_count_histogram.plt"
    print "where 'FFFF' is estimated visible fraction(0:1) "
    print "Assuming visible fraction 1"
    f=1
}

 
if (exists("z")) {
    print "effective z-depth (nm) : ".z     
    set ylabel "density (1/m^3)"    
} else {
    print "Effective depth not set. Call with"
    print "  gnuplot -e \"filename='foo.count'\" [-e \"z='ZZZZ'\" ] plot_count_histogram.plt"
    print "where 'ZZZZ' is effective foil thickness (nm)"
    #print "Assuming effective thickness 100 nm"
    #z=100 
    print "Calculating area density instead"
    set ylabel "density (1/m^2)"
    z=1
}


#   total volume density scaling factor

zfactor=1e27/(s*s*z*f)                  


##############################################################################
#
#   find histogram properties
#   
##############################################################################


stats filename using 2 nooutput
minbinx = STATS_min*s
binwidth = minbinx*2 




##############################################################################
#
#   print histogram 
#   
##############################################################################


set xlabel  "diameter (nm)"
set xrange [0:]
set xtics 0,2*binwidth
set format x "%.1f"


#if (exists("z")) {
#    set ylabel "density (1/m^3)"
#    print "volume"
#} else {
#    print "area"
#    set ylabel "density (1/m^2)"
#}
set format y "%.1tx10^{%S}"

bin(x,width)=width*floor((x-minbinx)/width) + minbinx 
#set style fill solid 1.0
set boxwidth binwidth
#plot filename using (bin($2*s,binwidth*0.999)):($5*zfactor) smooth freq with boxes lc "#000080" title prefix noenhanced           \
#   ,filename using (($2*s == 0 ? NaN : $2*s)):($5*zfactor):($4*zfactor):($6*zfactor) with yerrorbars lc "#000080" notitle
plot filename using (($2*s)):($5*zfactor == 0 ? NaN : $5*zfactor):($4*zfactor):($6*zfactor) with yerrorbars lc "#000080" notitle \
    ,filename using (bin($2*s,binwidth*0.999)):($5*zfactor) smooth freq with boxes lc "#000080" title prefix noenhanced   
    
    